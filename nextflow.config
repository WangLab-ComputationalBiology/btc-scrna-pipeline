/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/btcscrnapipeline Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Pipeline parameters
    workflow_level              = "Complete"

    // Input parameters
    genome                      = "GRCh38"
    sample_table                = "assets/test_sample_table.csv"
    meta_data                   = "assets/test_meta_data.csv"
    project_name                = "Test"
    outdir                      = "./"
    cancer_type                 = null
    fasta                       = false
    annotation                  = false
    igenomes_base               = 'gs://btc-refdata/scRNA/refData'

    // QC parameters
    thr_estimate_n_cells        = 300
    thr_mean_reads_per_cells    = 25000
    thr_median_genes_per_cell   = 900
    thr_median_umi_per_cell     = 1000
    thr_n_feature_rna_min       = 300
    thr_n_feature_rna_max       = 7500
    thr_percent_mito            = 25
    thr_n_observed_cells        = 300

    // Normalization parameters
    input_reduction_step        = null
    thr_n_features              = 2000

    // Clustering parameters
    input_cluster_step          = null
    input_integration_dimension = "auto"
    input_features_plot         = "EPCAM;PTPRC"
    input_group_plot            = "source_name;Sort"
    thr_resolution              = 0.25
    thr_proportion              = 0.25

    // Stratification parameters
    input_stratification_method = 'infercnv_label'
    thr_proportion              = 0.20
    thr_cluster_size            = 1000
    thr_consensus_score         = 2

    // Cell annotation parameters
    input_cell_markers_db       = "assets/cell_markers_database.csv"
    input_annotation_level      = "Major cells"

    // Cell cell communication
    input_source_groups         = "all"
    input_target_groups         = "all"
    input_cellchat_annotation   = "Secreted Signaling"

    // Batch correction parameters
    input_batch_step            = null
    input_integration_method    = "all"
    input_target_variables      = "batch"

    // Batch evaluation parameters 
    input_integration_evaluate  = "all"
    input_lisi_variables        = "cLISI;iLISI"
    input_auto_selection        = true
    thr_resolution              = 0.25
    thr_cell_proportion         = 0.30

    // Differential Expression parameters
    input_deg_step              = null
    input_deg_method            = "wilcox"
    input_top_deg               = 20
    thr_fold_change             = 0.25
    thr_min_percentage          = 0.1
    opt_hgv_filter              = false
    
    // Meta-program parameters
    input_meta_step             = null
    input_meta_programs_db      = "assets/meta_programs_database.csv"
    input_cell_category         = 'Malignant'
    input_heatmap_annotation    = 'source_name;seurat_clusters'

    //Boilerplat parameters
    tracedir                    = "${params.project_name}/pipeline_info"
    publish_dir_mode            = 'copy'
    monochrome_logs             = false
    help                        = false
    version                     = false
    validate_params             = true
    show_hidden_params          = false
    schema_ignore_params        = 'outdir,genomes,fasta,annotation,monochrome_logs'

    // Max resource parameters
    // Defaults only, expecting to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 28
    max_time                    = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
includeConfig 'conf/igenomes.config'

// Load nf-core custom profiles from different Institutions
// try {
//    includeConfig "${params.custom_config_base}/nfcore_custom.config"
// } catch (Exception e) {
//    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
// }

// Load nf-core/btcscrnapipeline custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/btcscrnapipeline.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/btcscrnapipeline profiles: ${params.custom_config_base}/pipeline/btcscrnapipeline.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    seadragon {

        module = 'singularity/3.7.0'

        singularity {
            enabled            = true
            autoMounts         = true
        }

        executor {
           name = 'lsf'
           perJobMemLimit      = true
        }

        process {
           queue               = 'medium'
           time                = '24h'
        }
        
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}


// Load igenomes.config if required
// if (!params.igenomes_ignore) {
//    includeConfig 'conf/igenomes.config'
// } else {
//    params.genomes = [:]
// }


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name              = 'nf-core/btcscrnapipeline'
    author            = """Andre Fonseca"""
    homePage          = 'https://github.com/WangLab-ComputationalBiology/btc-scrna-pipeline'
    description       = """A nextflow pipeline for single-cell multimodal applications"""
    mainScript        = 'main.nf'
    nextflowVersion   = '!>=22.10.1'
    version           = '1.0dev'
    doi               = ''
    recurseSubmodules = true
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
